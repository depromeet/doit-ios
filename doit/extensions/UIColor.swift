//
//  UIColor.swift
//  doit
//
//  Copyright Â© 2019 Depromeet. All rights reserved.
//

import UIKit

extension UIColor {
    
    convenience init(red: Int, green: Int, blue: Int, opacity: CGFloat = 1.0) {
        assert(red >= 0 && red <= 255, "Invalid red component")
        assert(green >= 0 && green <= 255, "Invalid green component")
        assert(blue >= 0 && blue <= 255, "Invalid blue component")
        self.init(red: CGFloat(red) / 255.0, green: CGFloat(green) / 255.0, blue: CGFloat(blue) / 255.0, alpha: opacity)
    }
    
    convenience init(hexString: String, alpha: CGFloat = 1.0) {
        var hexInt: UInt32 = 0
        let scanner = Scanner(string: hexString)
        scanner.charactersToBeSkipped = CharacterSet(charactersIn: "#")
        scanner.scanHexInt32(&hexInt)
        
        let red = CGFloat((hexInt & 0xff0000) >> 16) / 255.0
        let green = CGFloat((hexInt & 0xff00) >> 8) / 255.0
        let blue = CGFloat((hexInt & 0xff) >> 0) / 255.0
        let alpha = alpha
        
        self.init(red: red, green: green, blue: blue, alpha: alpha)
    }
}

// Color palette
// Auto generated by Zeplin
extension UIColor {
    
    @nonobjc class var warmGrey: UIColor {
        return UIColor(white: 151.0 / 255.0, alpha: 1.0)
    }
    
    @nonobjc class var black: UIColor {
        return UIColor(white: 34.0 / 255.0, alpha: 1.0)
    }
    
    @nonobjc class var white: UIColor {
        return UIColor(white: 1.0, alpha: 1.0)
    }
    
    @nonobjc class var dodgerBlue: UIColor {
        return UIColor(red: 77.0 / 255.0, green: 144.0 / 255.0, blue: 251.0 / 255.0, alpha: 1.0)
    }
    
    @nonobjc class var burple: UIColor {
        return UIColor(red: 119.0 / 255.0, green: 29.0 / 255.0, blue: 228.0 / 255.0, alpha: 1.0)
    }
    
    @nonobjc class var blackTwo: UIColor {
        return UIColor(white: 40.0 / 255.0, alpha: 1.0)
    }
    
    @nonobjc class var darkGrey: UIColor {
        return UIColor(red: 40.0 / 255.0, green: 41.0 / 255.0, blue: 42.0 / 255.0, alpha: 1.0)
    }
    
}
